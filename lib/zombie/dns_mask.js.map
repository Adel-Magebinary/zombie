{"version":3,"sources":["zombie/dns_mask.js"],"names":[],"mappings":"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","file":"zombie/dns_mask.js","sourcesContent":["// DNS mask allows you to test against local server using a real URL, for\n// example, write a test to visit http://example.com that will load a page from\n// localhost.\n\nconst DNS = require(\"dns\");\nconst Net = require(\"net\");\n\n\n// DNSMask hijacks Node's DNS.resolve and DNS.lookup and returns results based on\n// your domain/type -> IP mapping.\nmodule.exports = class DNSMask {\n\n  constructor() {\n    this._domains   = {};\n    this._lookup    = DNS.lookup;\n    DNS.lookup      = this.lookup.bind(this);\n    this._resolve   = DNS.resolve;\n    DNS.resolve     = this.resolve.bind(this);\n    this._resolveMx = DNS.resolve;\n    DNS.resolveMx   = this.resolveMx.bind(this);\n  }\n\n\n  // Requests for the given domain will return 127.0.0.1 (or ::1 for IPv6).\n  //\n  // Use asterisks to map all subdomains, e.g. *.example.com.\n  localhost(domain) {\n    this.map(domain, \"A\", \"127.0.0.1\");\n    this.map(domain, \"AAAA\", \"::1\");\n  }\n\n  // Requests for the given domain and type will return the specified address.\n  //\n  // For example:\n  //   map(\"example.com\", \"CNAME\", \"localhost\")\n  //   map(\"example.com\", \"A\", \"127.0.0.1\")\n  //   map(\"example.com\", \"AAAA\", \"::1\")\n  //\n  // The record type (A, CNAME, etc) must be uppercase.  You can also call with\n  // two arguments, to set A record (IPv4) or AAAA (IPv6).  This is equivalent:\n  //   map(\"example.com\", \"localhost\") // CNAME\n  //   map(\"example.com\", \"127.0.0.1\") // A\n  //   map(\"example.com\", \"::1\")       // AAAA\n  //\n  // Use asterisks to map all subdomains, e.g. *.example.com.\n  map(domain, type, address) {\n    if (arguments.length === 2) {\n      address = type;\n      switch (Net.isIP(address)) {\n        case 4: {\n          type = \"A\";\n          break;\n        }\n        case 6: {\n          type = \"AAAA\";\n          break;\n        }\n        default: {\n          type = \"CNAME\";\n        }\n      }\n    }\n\n    if (address) {\n      if (!this._domains[domain])\n        this._domains[domain] = {};\n      this._domains[domain][type] = address;\n    } else\n      this.unmap(domain, type);\n  }\n\n  // Remove all mapping for the given domain/type.  With one argument, removes\n  // all mapping for the given domain, of any type.\n  unmap(domain, type) {\n    if (type) {\n      if (this._domains[domain])\n        delete this._domains[domain][type];\n    } else\n      delete this._domains[domain];\n  }\n\n\n  // Alternative implementation for Node's DNS.lookup.\n  lookup(domain, family, callback) {\n    // With two arguments, second argument is the callback, family is 4 or 6\n    if (arguments.length === 2)\n      [family, callback] = [null, family];\n\n    // If domain is missing, lookup returns null IP\n    if (!domain) {\n      setImmediate(function() {\n        callback(null, null, 4);\n      });\n      return;\n    }\n\n    // If lookup called with IP address, resolve that address.\n    if (Net.isIP(domain)) {\n      setImmediate(function() {\n        callback(null, domain, Net.isIP(domain));\n      });\n      return;\n    }\n\n    // First try to resolve CNAME into another domain name, then resolve that to\n    // A/AAAA record\n    const cname = this._find(domain, \"CNAME\");\n    if (cname)\n      domain = cname;\n    if (family === 4 || !family) {\n      const ipv4 = this._find(domain, \"A\");\n      if (ipv4) {\n        setImmediate(function() {\n          callback(null, ipv4, 4);\n        });\n        return;\n      }\n    }\n    if (family === 6 || !family) {\n      const ipv6 = this._find(domain, \"AAAA\");\n      if (ipv6) {\n        setImmediate(function() {\n          callback(null, ipv6, 6);\n        });\n        return;\n      }\n    }\n    this._lookup(domain, family, callback);\n  }\n\n  // Alternative implementation for Node's DNS.resolve.\n  resolve(domain, type, callback) {\n    // With two arguments, second argument is the callback, type is 'A'\n    if (arguments.length === 2)\n      [type, callback] = [\"A\", type];\n    const ip = this._find(domain, type);\n    if (ip) {\n      setImmediate(function() {\n        callback(null, [ip]);\n      });\n    } else\n      this._resolve(domain, type, callback);\n  }\n\n  // Alternative implementation for Node's DNS.resolveMx.\n  resolveMx(domain, callback) {\n    const exchange = this._find(domain, \"MX\");\n    if (exchange) {\n      setImmediate(function() {\n        callback(null, [exchange]);\n      });\n    } else\n      this._resolveMx(domain, callback);\n  }\n\n\n  // Returns IP address for the given domain/type.\n  _find(domain, type) {\n    // Turn domain into a list of matches, from most to least specific, e.g.\n    // 'foo.example.com' turns into:\n    //\n    // [ 'foo.example.test',\n    //   '*.foo.example.test',\n    //   '*.example.test',\n    //   '*.test' ]\n    const parts   = domain.split('.');\n    const domains = [domain];\n    while (parts.length) {\n      domains.push(\"*.\" + parts.join('.'));\n      parts.shift();\n    }\n\n    return domains.map(pattern => this._domains[pattern] )\n                  .map(domain  => domain && domain[type] )\n                  .filter(ip   => ip)[0];\n  }\n\n};\n\n"],"sourceRoot":"/source/"}