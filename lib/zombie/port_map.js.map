{"version":3,"sources":["zombie/port_map.js"],"names":[],"mappings":";;;;;;AAAA,IAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;;;AAG7B,MAAM,CAAC,OAAO;AAED,WAFU,OAAO;qCAAP,OAAO;;AAG1B,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,QAAI,CAAC,KAAK,GAAI,IAAI,CAAC,OAAO,CAAC;AAC3B,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;GACzC;;AANoB,SAAO,WAQ5B,GAAG,GAAA,aAAC,QAAQ,EAAE,IAAI,EAAE;AAClB,QAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;GAC9B;;AAVoB,SAAO,WAY5B,KAAK,GAAA,eAAC,QAAQ,EAAE;AACd,WAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;GAC7B;;AAdoB,SAAO,WAgB5B,QAAQ,GAAA,kBAAC,OAAO,EAAE,QAAQ,EAAE;AAC1B,QAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAK,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AAAC,IAAI,WAAW,CAAC;AACjG,QAAM,IAAI,GAAO,OAAO,CAAC,IAAI,IAAS,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,AAAC,IAAI,EAAE,CAAC;AACxF,QAAI,IAAI,KAAK,EAAE,EAAE;AACf,UAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AACpC,UAAI,MAAM,EAAE;AACV,eAAO,GAAG,MAAA,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE;AACnC,kBAAQ,EAAE,QAAQ;AAClB,cAAI,EAAM,MAAM;SACjB,CAAC,CAAC;OACJ;KACF;AACD,WAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;GACtC;;AA7BoB,SAAO,WA+B5B,KAAK,GAAA,eAAC,MAAM,EAAE;;;;;;;;;AAQZ,QAAM,KAAK,GAAK,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClC,QAAM,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC;AACzB,WAAO,KAAK,CAAC,MAAM,EAAE;AACnB,aAAO,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;AACrC,WAAK,CAAC,KAAK,EAAE,CAAC;KACf;;AAED,WAAO,OAAO,CACX,GAAG,CAAC,UAAA,OAAO;aAAI,MAAK,MAAM,CAAC,OAAO,CAAC;KAAA,CAAC,CACpC,MAAM,CAAC,UAAA,IAAI;aAAI,IAAI;KAAA,CAAC,CAAC,CAAC,CAAC,CAAC;GAC5B;;SAjDoB,OAAO;IAmD7B,CAAC","file":"zombie/port_map.js","sourcesContent":["const HTTP = require(\"http\");\n\n\nmodule.exports = class PortMap {\n\n  constructor() {\n    this._ports = {};\n    this._http  = HTTP.request;\n    HTTP.request = this._request.bind(this);\n  }\n\n  map(hostname, port) {\n    this._ports[hostname] = port;\n  }\n\n  unmap(hostname) {\n    delete this._ports.hostname;\n  }\n\n  _request(options, callback) {\n    const hostname = options.hostname || (options.host && options.host.split(\":\")[0]) || \"localhost\";\n    const port     = options.port     || (options.host && options.host.split(\":\")[1]) || 80;\n    if (port === 80) {\n      const mapped = this._find(hostname);\n      if (mapped) {\n        options = Object.assign({}, options, {\n          hostname: hostname,\n          port:     mapped\n        });\n      }\n    }\n    return this._http(options, callback);\n  }\n\n  _find(domain) {\n    // Turn domain into a list of matches, from most to least specific, e.g.\n    // 'foo.example.com' turns into:\n    //\n    // [ 'foo.example.test',\n    //   '*.foo.example.test',\n    //   '*.example.test',\n    //   '*.test' ]\n    const parts   = domain.split('.');\n    const domains = [domain];\n    while (parts.length) {\n      domains.push(\"*.\" + parts.join('.'));\n      parts.shift();\n    }\n\n    return domains\n      .map(pattern => this._ports[pattern])\n      .filter(port => port)[0];\n  }\n\n};\n\n"],"sourceRoot":"/source/"}