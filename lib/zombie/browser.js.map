{"version":3,"sources":["zombie/browser.js"],"names":[],"mappings":"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","file":"zombie/browser.js","sourcesContent":["const assert            = require('assert');\nconst Assert            = require('./assert');\nconst Tabs              = require('./tabs');\nconst Console           = require('./console');\nconst Cookies           = require('./cookies');\nconst debug             = require('debug');\nconst DNSMask           = require('./dns_mask');\nconst DOM               = require('./dom');\nconst { EventEmitter }  = require('events');\nconst EventLoop         = require('./eventloop');\nconst { format }        = require('util');\nconst File              = require('fs');\nconst Interactions      = require('./interact');\nconst Mime              = require('mime');\nconst ms                = require('ms');\nconst Path              = require('path');\nconst { Promise }       = require('bluebird');\nconst PortMap           = require('./port_map');\nconst Resources         = require('./resources');\nconst Storages          = require('./storage');\nconst Tough             = require('tough-cookie');\nconst { Cookie }        = Tough;\nconst URL               = require('url');\n\n\n// Monkey patching JSDOM.  This is why we can't have nice things.\nrequire('./jsdom_patches');\nrequire('./forms');\nrequire('./dom_focus');\nrequire('./dom_iframe');\nrequire('./scripts');\n\n\n// Version number.  We get this from package.json.\nconst VERSION = require(`${__dirname}/../../package.json`).version;\n\n// Browser options you can set when creating new browser, or on browser instance.\nconst BROWSER_OPTIONS  = ['features', 'headers', 'waitDuration',\n                          'proxy', 'referrer', 'silent', 'site', 'strictSSL', 'userAgent',\n                          'maxRedirects', 'language', 'runScripts', 'localAddress'];\n\n// Supported browser features.\nconst BROWSER_FEATURES  = ['scripts', 'css', 'img', 'iframe'];\n// These features are set on/off by default.\n// Note that default values are actually prescribed where they are used,\n// by calling hasFeature with name and default\nconst DEFAULT_FEATURES  = 'scripts no-css no-img iframe';\n\nconst MOUSE_EVENT_NAMES = ['mousedown', 'mousemove', 'mouseup'];\n\n\n// Represents credentials for a given host.\nclass Credentials {\n\n  // Apply security credentials to the outgoing request headers.\n  apply(headers) {\n    switch (this.scheme) {\n      case 'basic': {\n        const base64 = new Buffer(`${this.user}:${this.password}`).toString('base64');\n        headers.authorization = `Basic ${base64}`;\n        break;\n      }\n      case 'bearer': {\n        headers.authorization = `Bearer ${this.token}`;\n        break;\n      }\n      case 'oauth': {\n        headers.authorization = `OAuth ${this.token}`;\n        break;\n      }\n    }\n  }\n\n  // Use HTTP Basic authentication.  Requires two arguments, username and password.\n  basic(user, password) {\n    this.scheme   = 'basic';\n    this.user     =  user;\n    this.password = password;\n  }\n\n  // Use OAuth 2.0 Bearer (recent drafts).  Requires one argument, the access token.\n  bearer(token) {\n    this.scheme = 'bearer';\n    this.token  = token;\n  }\n\n  // Use OAuth 2.0 (early drafts).  Requires one argument, the access token.\n  oauth(token) {\n    this.scheme = 'oauth';\n    this.token  = token;\n  }\n\n  // Reset these credentials.\n  reset() {\n    delete this.scheme;\n    delete this.token;\n    delete this.user;\n    delete this.password;\n  }\n}\n\n\n// Use the browser to open up new windows and load documents.\n//\n// The browser maintains state for cookies and local storage.\nclass Browser extends EventEmitter {\n\n  constructor(options = {}) {\n    // Used for assertions\n    this.assert     = new Assert(this);\n    this.cookies    = new Cookies();\n    // Shared by all windows.\n    this.console    = new Console(this);\n    // Start with no this referrer.\n    this.referrer   = null;\n    // All the resources loaded by this browser.\n    this.resources  = new Resources(this);\n    // Open tabs.\n    this.tabs       = new Tabs(this);\n    // The browser event loop.\n    this.eventLoop  = new EventLoop(this);\n    // Returns all errors reported while loading this window.\n    this.errors     = [];\n\n    this._storages  = new Storages();\n    this._interact  = new Interactions(this);\n\n    // The window that is currently in scope, some JS functions need this, e.g.\n    // when closing a window, you need to determine whether caller (window in\n    // scope) is same as window.opener\n    this._windowInScope = null;\n\n    // Message written to window.console.  Level is log, info, error, etc.\n    //\n    // All output goes to stdout, except when browser.silent = true and output\n    // only shown when debugging (DEBUG=zombie).\n    this\n      .on('console', (level, message)=> {\n        if (this.silent)\n          debug(`>> ${message}`);\n        else\n          console.log(message);\n      })\n      .on('log', (...args)=> {\n        // Message written to browser.log.\n        Browser._debug(...args);\n      });\n\n    // Logging resources\n    this\n      .on('request', (request)=> request)\n      .on('response', (request, response)=> {\n        Browser._debug(`${request.method || 'GET'} ${response.url} => ${response.statusCode}`);\n      })\n      .on('redirect', (request, response, redirectRequest)=> {\n        Browser._debug(`${request.method || 'GET'} ${request.url} => ${response.statusCode} ${redirectRequest.url}`);\n      })\n      .on('loaded', (document)=> {\n        Browser._debug('Loaded document', document.location.href);\n      });\n\n\n    // Logging windows/tabs\n    this\n      .on('opened', (window)=> {\n        Browser._debug('Opened window', window.location.href, window.name || '');\n      })\n      .on('closed', (window)=> {\n        Browser._debug('Closed window', window.location.href, window.name || '');\n      });\n\n    // Window becomes inactive\n    this.on('active', (window)=> {\n      const winFocus = window.document.createEvent('HTMLEvents');\n      winFocus.initEvent('focus', false, false);\n      window.dispatchEvent(winFocus);\n\n      if (window.document.activeElement) {\n        const elemFocus = window.document.createEvent('HTMLEvents');\n        elemFocus.initEvent('focus', false, false);\n        window.document.activeElement.dispatchEvent(elemFocus);\n      }\n    });\n\n    // Window becomes inactive\n    this.on('inactive', (window)=> {\n      if (window.document.activeElement) {\n        const elemBlur = window.document.createEvent('HTMLEvents');\n        elemBlur.initEvent('blur', false, false);\n        window.document.activeElement.dispatchEvent(elemBlur);\n      }\n      const winBlur = window.document.createEvent('HTMLEvents');\n      winBlur.initEvent('blur', false, false);\n      window.dispatchEvent(winBlur);\n    });\n\n\n    // Event loop\n\n    // Make sure we don't blow up Node when we get a JS error, but dump error to console.  Also, catch any errors\n    // reported while processing resources/JavaScript.\n    this\n      .on('timeout', (fn, delay)=> {\n        Browser._debug(`Fired timeout after ${delay}ms delay`);\n      })\n      .on('interval', (fn, interval)=> {\n        Browser._debug(`Fired interval every ${interval}ms`);\n      })\n      .on('link', (url, target)=> {\n        Browser._debug(`Follow link to ${url}`);\n      })\n      .on('submit', (url, target)=> {\n        Browser._debug(`Submit form to ${url}`);\n      })\n      .on('error', (error)=> {\n        this.errors.push(error);\n        Browser._debug(error.message, error.stack);\n      })\n      .on('done', (timedOut)=> {\n        if (timedOut)\n          Browser._debug('Event loop timed out');\n        else\n          Browser._debug('Event loop is empty');\n      });\n\n\n    // Sets the browser options.\n    for (let name of BROWSER_OPTIONS) {\n      if (options && options.hasOwnProperty(name))\n        this[name] = options[name];\n      else if (Browser.default.hasOwnProperty(name))\n        this[name] = Browser.default[name];\n    }\n\n    // Last, run all extensions in order.\n    for (let extension of Browser._extensions)\n      extension(this);\n  }\n\n\n  // Returns true if the given feature is enabled.\n  //\n  // If the feature is listed, then it is enabled.  If the feature is listed\n  // with \"no-\" prefix, then it is disabled.  If the feature is missing, return\n  // the default value.\n  hasFeature(name, defaultValue = true) {\n    const features = (this.features || '').split(/\\s+/);\n    return ~features.indexOf(name) ? true :\n           ~features.indexOf(`no-${name}`) ? false :\n           defaultValue;\n  }\n\n\n  // Return a new browser with a snapshot of this browser's state.\n  // Any changes to the forked browser's state do not affect this browser.\n  fork() {\n    throw new Error('Not implemented');\n  }\n\n\n  // Windows\n  // -------\n\n  // Returns the currently open window\n  get window() {\n    return this.tabs.current;\n  }\n\n  // Open new browser window.\n  open({ url, name, referrer } = {}) {\n    return this.tabs.open({ url, name, referrer });\n  }\n\n  // browser.error => Error\n  //\n  // Returns the last error reported while loading this window.\n  get error() {\n    return this.errors[this.errors.length - 1];\n  }\n\n\n  // Events\n  // ------\n\n  // Waits for the browser to complete loading resources and processing JavaScript events.\n  //\n  // Accepts two parameters, both optional:\n  // options   - Options that determine how long to wait (see below)\n  // callback  - Called with error or null and browser\n  //\n  // To determine how long to wait:\n  // duration  - Do not wait more than this duration (milliseconds or string of\n  //             the form \"5s\"). Defaults to \"5s\" (see Browser.waitDuration).\n  // element   - Stop when this element(s) appear in the DOM.\n  // function  - Stop when function returns true; this function is called with\n  //             the active window and expected time to the next event (0 to\n  //             Infinity).\n  //\n  // As a convenience you can also pass the duration directly.\n  //\n  // Without a callback, this method returns a promise.\n  wait(options, callback) {\n    if (arguments.length === 1 && typeof(options) === 'function')\n      [callback, options] = [options, null];\n    assert(!callback || typeof(callback) === 'function', 'Second argument expected to be a callback function or null');\n\n    // Support all sort of shortcuts for options. Unofficial.\n    const waitDuration =\n      (typeof(options) === 'number') ? options :\n      (typeof(options) === 'string') ? ms(options) :\n      (options && options.duration || this.waitDuration);\n    const completionFunction =\n      (typeof(options) === 'function') ? options :\n      (options && options.element) ? completionFromElement(options.element) :\n      (options && options.function);\n\n    function completionFromElement(element) {\n      return function(window) {\n        return !!window.document.querySelector(element);\n      };\n    }\n\n    const promise = this.window ?\n      this.eventLoop.wait(waitDuration, completionFunction) :\n      Promise.reject(new Error('No window open'));\n\n    if (callback)\n      promise.done(callback, callback);\n    else\n      return promise;\n  }\n\n\n  // Waits for the browser to get a single event from any EventSource,\n  // then completes loading resources and processing JavaScript events.\n  //\n  // Accepts an optional callback which is called with error or nothing\n  //\n  // Without a callback, this method returns a promise.\n  waitForServer(options, callback) {\n    if (arguments.length === 1 && typeof(options) === 'function')\n      [callback, options] = [options, null];\n\n    const promise = this.window ?\n      new Promise((resolve)=> {\n        this.eventLoop.once('server', ()=> {\n          resolve(this.wait(options, null));\n        });\n      }) :\n      Promise.reject(new Error('No window open'));\n\n    if (callback)\n      promise.done(callback, callback);\n    else\n      return promise;\n  }\n\n\n  // Fire a DOM event.  You can use this to simulate a DOM event, e.g. clicking\n  // a link.  These events will bubble up and can be cancelled.  Like `wait`\n  // this method takes an optional callback and returns a promise.\n  //\n  // name - Even name (e.g `click`)\n  // target - Target element (e.g a link)\n  // callback - Called with error or nothing, can be false (see below)\n  //\n  // Returns a promise\n  //\n  // In some cases you want to fire the event and wait for JS to do its thing\n  // (e.g.  click link), either with callback or promise.  In other cases,\n  // however, you want to fire the event but not wait quite yet (e.g. fill\n  // field).  Not passing callback is not enough, that just implies using\n  // promises.  Instead, pass false as the callback.\n  fire(selector, eventName, callback) {\n    assert(this.window, 'No window open');\n    const target = this.query(selector);\n    assert(target && target.dispatchEvent, 'No target element (note: call with selector/element, event name and callback)');\n\n    const eventType = ~MOUSE_EVENT_NAMES.indexOf(eventName) ? 'MouseEvents' : 'HTMLEvents';\n    const event = this.document.createEvent(eventType);\n    event.initEvent(eventName, true, true);\n    target.dispatchEvent(event);\n    // Only run wait if intended to\n    if (callback !== false)\n      return this.wait(callback);\n  }\n\n  // Click on the element and returns a promise.\n  //\n  // selector - Element or CSS selector\n  // callback - Called with error or nothing\n  //\n  // Returns a promise.\n  click(selector, callback) {\n    return this.fire(selector, 'click', callback);\n  }\n\n  // Dispatch asynchronously.  Returns true if preventDefault was set.\n  dispatchEvent(selector, event) {\n    assert(this.window, 'No window open');\n    const target = this.query(selector);\n    return target.dispatchEvent(event);\n  }\n\n\n  // Accessors\n  // ---------\n\n  // browser.queryAll(selector, context?) => Array\n  //\n  // Evaluates the CSS selector against the document (or context node) and return array of nodes.\n  // (Unlike `document.querySelectorAll` that returns a node list).\n  queryAll(selector = 'html', context = this.document) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n\n    if (Array.isArray(selector))\n      return selector;\n    if (selector instanceof DOM.Element)\n      return [selector];\n    if (selector) {\n      const elements = context.querySelectorAll(selector);\n      return [...elements];\n    } else\n      return [];\n  }\n\n  // browser.query(selector, context?) => Element\n  //\n  // Evaluates the CSS selector against the document (or context node) and return an element.\n  query(selector = 'html', context = this.document) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n\n    if (selector instanceof DOM.Element)\n      return selector;\n    return selector ? context.querySelector(selector) : context;\n  }\n\n  // WebKit offers this.\n  $$(selector, context) {\n    return this.query(selector, context);\n  }\n\n  // browser.querySelector(selector) => Element\n  //\n  // Select a single element (first match) and return it.\n  //\n  // selector - CSS selector\n  //\n  // Returns an Element or null\n  querySelector(selector) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n    return this.document.querySelector(selector);\n  }\n\n  // browser.querySelectorAll(selector) => NodeList\n  //\n  // Select multiple elements and return a static node list.\n  //\n  // selector - CSS selector\n  //\n  // Returns a NodeList or null\n  querySelectorAll(selector) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n    return this.document.querySelectorAll(selector);\n  }\n\n  // browser.text(selector, context?) => String\n  //\n  // Returns the text contents of the selected elements.\n  //\n  // selector - CSS selector (if missing, entire document)\n  // context - Context element (if missing, uses document)\n  //\n  // Returns a string\n  text(selector = 'html', context = this.document) {\n    assert(this.document, 'No window open');\n\n    if (this.document.documentElement) {\n      return this.queryAll(selector, context)\n        .map(elem => elem.textContent)\n        .join('')\n        .trim()\n        .replace(/\\s+/g, ' ');\n    } else {\n      return (this.source ? this.source.toString : '');\n    }\n  }\n\n\n  // browser.html(selector?, context?) => String\n  //\n  // Returns the HTML contents of the selected elements.\n  //\n  // selector - CSS selector (if missing, entire document)\n  // context - Context element (if missing, uses document)\n  //\n  // Returns a string\n  html(selector = 'html', context = this.document) {\n    assert(this.document, 'No window open');\n\n    if (this.document.documentElement) {\n      return this.queryAll(selector, context)\n        .map(elem => elem.outerHTML.trim())\n        .join('');\n    } else {\n      return (this.source ? this.source.toString : '');\n    }\n  }\n\n\n  // browser.xpath(expression, context?) => XPathResult\n  //\n  // Evaluates the XPath expression against the document (or context node) and return the XPath result.  Shortcut for\n  // `document.evaluate`.\n  xpath(expression, context = null) {\n    return this.document.evaluate(expression, context || this.document.documentElement, null, DOM.XPathResult.ANY_TYPE);\n  }\n\n  // browser.document => Document\n  //\n  // Returns the main window's document. Only valid after opening a document (see `browser.open`).\n  get document() {\n    return this.window && this.window.document;\n  }\n\n  // browser.body => Element\n  //\n  // Returns the body Element of the current document.\n  get body() {\n    return this.querySelector('body');\n  }\n\n  // Element that has the current focus.\n  get activeElement() {\n    return this.document && this.document.activeElement;\n  }\n\n  // Close the currently open tab, or the tab opened to the specified window.\n  close(window) {\n    this.tabs.close(window);\n  }\n\n  // done\n  //\n  // Close all windows, clean state. You're going to need to call this to free up memory.\n  destroy() {\n    if (this.tabs) {\n      this.tabs.closeAll();\n      this.tabs = null;\n    }\n  }\n\n\n  // Navigation\n  // ----------\n\n  // browser.visit(url, callback?)\n  //\n  // Loads document from the specified URL, processes events and calls the callback, or returns a promise.\n  visit(url, options, callback) {\n    if (arguments.length < 3 && typeof(options) === 'function')\n      [options, callback] = [{}, options];\n\n    const site = /^(https?:|file:)/i.test(this.site) ? this.site : `http://${this.site || 'localhost'}/`;\n    url = URL.resolve(site, URL.parse(URL.format(url)));\n\n    if (this.window)\n      this.tabs.close(this.window);\n    this.errors = [];\n    this.tabs.open({ url: url, referrer: this.referrer });\n    return this.wait(options, callback);\n  }\n\n\n  // browser.load(html, callback)\n  //\n  // Loads the HTML, processes events and calls the callback.\n  //\n  // Without a callback, returns a promise.\n  load(html, callback) {\n    if (this.window)\n      this.tabs.close(this.window);\n    this.errors = [];\n    this.tabs.open({ html: html });\n    return this.wait(null, callback);\n  }\n\n\n  // browser.location => Location\n  //\n  // Return the location of the current document (same as `window.location`).\n  get location() {\n    return this.window && this.window.location;\n  }\n\n  // browser.location = url\n  //\n  // Changes document location, loads new document if necessary (same as setting `window.location`).\n  set location(url) {\n    if (this.window)\n      this.window.location = url;\n    else\n      this.open({ url: url });\n  }\n\n  // browser.url => String\n  //\n  // Return the URL of the current document (same as `document.URL`).\n  get url() {\n    return this.window && this.window.location.href;\n  }\n\n  // browser.link(selector) : Element\n  //\n  // Finds and returns a link by its text content or selector.\n  link(selector) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n    // If the link has already been queried, return itself\n    if (selector instanceof DOM.Element)\n      return selector;\n\n    try {\n      const link = this.querySelector(selector);\n      if (link && link.tagName === 'A')\n        return link;\n    } catch (error) {\n    }\n    for (let elem of [...this.querySelectorAll('body a')]) {\n      if (elem.textContent.trim() === selector)\n        return elem;\n    }\n    return null;\n  }\n\n  // browser.clickLink(selector, callback)\n  //\n  // Clicks on a link. Clicking on a link can trigger other events, load new page, etc: use a callback to be notified of\n  // completion.  Finds link by text content or selector.\n  //\n  // selector - CSS selector or link text\n  // callback - Called with two arguments: error and browser\n  clickLink(selector, callback) {\n    const link = this.link(selector);\n    assert(link, `No link matching '${selector}'`);\n    return this.click(link, callback);\n  }\n\n  // Return the history object.\n  get history() {\n    if (!this.window)\n      this.open();\n    return this.window.history;\n  }\n\n  // Navigate back in history.\n  back(callback) {\n    this.window.history.back();\n    return this.wait(callback);\n  }\n\n  // Reloads current page.\n  reload(callback) {\n    this.window.location.reload();\n    return this.wait(callback);\n  }\n\n  // Returns a new Credentials object for the specified host.  These\n  // authentication credentials will only apply when making requests to that\n  // particular host (hostname:port).\n  //\n  // You can also set default credentials by using the host '*'.\n  //\n  // If you need to get the credentials without setting them, call with true as\n  // the second argument.\n  authenticate(host, create = true) {\n    host = host || '*';\n    let credentials = this._credentials && this._credentials[host];\n    if (!credentials) {\n      if (create) {\n        credentials = new Credentials();\n        if (!this._credentials)\n          this._credentials = {};\n        this._credentials[host] = credentials;\n      } else\n        credentials = this.authenticate();\n    }\n    return credentials;\n  }\n\n\n  // browser.saveHistory() => String\n  //\n  // Save history to a text string.  You can use this to load the data later on using `browser.loadHistory`.\n  saveHistory() {\n    this.window.history.save();\n  }\n\n  // browser.loadHistory(String)\n  //\n  // Load history from a text string (e.g. previously created using `browser.saveHistory`.\n  loadHistory(serialized) {\n    this.window.history.load(serialized);\n  }\n\n\n  // Forms\n  // -----\n\n  // browser.field(selector) : Element\n  //\n  // Find and return an input field (`INPUT`, `TEXTAREA` or `SELECT`) based on a CSS selector, field name (its `name`\n  // attribute) or the text value of a label associated with that field (case sensitive, but ignores leading/trailing\n  // spaces).\n  field(selector) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n    // If the field has already been queried, return itself\n    if (selector instanceof DOM.Element)\n      return selector;\n\n    try {\n      // Try more specific selector first.\n      const field = this.query(selector);\n      if (field && (field.tagName === 'INPUT' || field.tagName === 'TEXTAREA' || field.tagName === 'SELECT'))\n        return field;\n    } catch (error) {\n      // Invalid selector, but may be valid field name\n    }\n\n    // Use field name (case sensitive).\n    for (let elem of this.queryAll('input[name],textarea[name],select[name]')) {\n      if (elem.getAttribute('name') === selector)\n        return elem;\n    }\n\n    // Try finding field from label.\n    for (let label of this.queryAll('label')) {\n      if (label.textContent.trim() === selector) {\n        // nLabel can either reference field or enclose it\n        const forAttr = label.getAttribute('for');\n        return forAttr ? \n          this.document.getElementById(forAttr) :\n          label.querySelector('input,textarea,select');\n      }\n    }\n    return null;\n  }\n\n\n  // browser.focus(selector) : Element\n  //\n  // Turns focus to the selected input field.  Shortcut for calling `field(selector).focus()`.\n  focus(selector) {\n    const field = this.field(selector) || this.query(selector);\n    assert(field, `No form field matching '${selector}'`);\n    field.focus();\n    return this;\n  }\n\n\n  // browser.fill(selector, value) => this\n  //\n  // Fill in a field: input field or text area.\n  //\n  // selector - CSS selector, field name or text of the field label\n  // value - Field value\n  //\n  // Returns this.\n  fill(selector, value) {\n    const field = this.field(selector);\n    assert(field && (field.tagName === 'TEXTAREA' || (field.tagName === 'INPUT')), `No INPUT matching '${selector}'`);\n    assert(!field.getAttribute('disabled'), 'This INPUT field is disabled');\n    assert(!field.getAttribute('readonly'), 'This INPUT field is readonly');\n\n    // Switch focus to field, change value and emit the input event (HTML5)\n    field.focus();\n    field.value = value;\n    this.fire(field, 'input', false);\n    // Switch focus out of field, if value changed, this will emit change event\n    field.blur();\n    return this;\n  }\n\n  _setCheckbox(selector, value) {\n    const field = this.field(selector);\n    assert(field && field.tagName === 'INPUT' && field.type === 'checkbox', `No checkbox INPUT matching '${selector}'`);\n    assert(!field.getAttribute('disabled'), 'This INPUT field is disabled');\n    assert(!field.getAttribute('readonly'), 'This INPUT field is readonly');\n\n    if (field.checked ^ value)\n      field.click();\n    return this;\n  }\n\n  // browser.check(selector) => this\n  //\n  // Checks a checkbox.\n  //\n  // selector - CSS selector, field name or text of the field label\n  //\n  // Returns this.\n  check(selector) {\n    return this._setCheckbox(selector, true);\n  }\n\n  // browser.uncheck(selector) => this\n  //\n  // Unchecks a checkbox.\n  //\n  // selector - CSS selector, field name or text of the field label\n  //\n  // Returns this.\n  uncheck(selector) {\n    return this._setCheckbox(selector, false);\n  }\n\n  // browser.choose(selector) => this\n  //\n  // Selects a radio box option.\n  //\n  // selector - CSS selector, field value or text of the field label\n  //\n  // Returns this.\n  choose(selector) {\n    const field = this.field(selector) || this.field(`input[type=radio][value=\\'${escape(selector)}\\']`);\n    assert(field && field.tagName === 'INPUT' && field.type === 'radio', `No radio INPUT matching '${selector}'`);\n\n    field.click();\n    return this;\n  }\n\n  _findOption(selector, value) {\n    const field = this.field(selector);\n    assert(field && field.tagName === 'SELECT', `No SELECT matching '${selector}'`);\n    assert(!field.getAttribute('disabled'), 'This SELECT field is disabled');\n    assert(!field.getAttribute('readonly'), 'This SELECT field is readonly');\n\n    const options = [...field.options];\n    for (let option of options) {\n      if (option.value === value)\n        return option;\n    }\n    for (let option of options) {\n      if (option.label === value)\n        return option;\n    }\n    for (let option of options) {\n      if (option.textContent.trim() === value)\n        return option;\n    }\n    throw new Error(`No OPTION '${value}'`);\n  }\n\n  // browser.select(selector, value) => this\n  //\n  // Selects an option.\n  //\n  // selector - CSS selector, field name or text of the field label\n  // value - Value (or label) or option to select\n  //\n  // Returns this.\n  select(selector, value) {\n    const option = this._findOption(selector, value);\n    this.selectOption(option);\n    return this;\n  }\n\n  // browser.selectOption(option) => this\n  //\n  // Selects an option.\n  //\n  // option - option to select\n  //\n  // Returns this.\n  selectOption(selector) {\n    const option = this.query(selector);\n    if (option && !option.getAttribute('selected')) {\n      const select = this.xpath('./ancestor::select', option).iterateNext();\n      option.setAttribute('selected', 'selected');\n      select.focus();\n      this.fire(select, 'change', false);\n    }\n    return this;\n  }\n\n  // browser.unselect(selector, value) => this\n  //\n  // Unselects an option.\n  //\n  // selector - CSS selector, field name or text of the field label\n  // value - Value (or label) or option to unselect\n  //\n  // Returns this.\n  unselect(selector, value) {\n    const option = this._findOption(selector, value);\n    this.unselectOption(option);\n    return this;\n  }\n\n  // browser.unselectOption(option) => this\n  //\n  // Unselects an option.\n  //\n  // selector - selector or option to unselect\n  //\n  // Returns this.\n  unselectOption(selector) {\n    const option = this.query(selector);\n    if (option && option.getAttribute('selected')) {\n      const select = this.xpath('./ancestor::select', option).iterateNext();\n      assert(select.multiple, 'Cannot unselect in single select');\n      option.removeAttribute('selected');\n      select.focus();\n      this.fire(select, 'change', false);\n    }\n    return this;\n  }\n\n  // browser.attach(selector, filename) => this\n  //\n  // Attaches a file to the specified input field.  The second argument is the file name.\n  //\n  // Returns this.\n  attach(selector, filename) {\n    const field = this.field(selector);\n    assert(field && field.tagName === 'INPUT' && field.type === 'file', `No file INPUT matching '${selector}'`);\n\n    if (filename) {\n      const stat = File.statSync(filename);\n      const file = new (this.window.File)();\n      file.name = Path.basename(filename);\n      file.type = Mime.lookup(filename);\n      file.size = stat.size;\n\n      field.value = filename;\n      field.files = field.files || [];\n      field.files.push(file);\n    }\n    field.focus();\n    this.fire(field, 'change', false);\n    return this;\n  }\n\n  // browser.button(selector) : Element\n  //\n  // Finds a button using CSS selector, button name or button text (`BUTTON` or `INPUT` element).\n  //\n  // selector - CSS selector, button name or text of BUTTON element\n  button(selector) {\n    assert(this.document && this.document.documentElement, 'No open window with an HTML document');\n    // If the button has already been queried, return itself\n    if (selector instanceof DOM.Element)\n      return selector;\n\n    try {\n      const button = this.querySelector(selector);\n      if (button && (button.tagName === 'BUTTON' || button.tagName === 'INPUT'))\n        return button;\n    } catch (error) {\n    }\n    for (let elem of [...this.querySelectorAll('button')]) {\n      if (elem.textContent.trim() === selector)\n        return elem;\n    }\n\n    const inputs = [...this.querySelectorAll('input[type=submit],button')];\n    for (let input of inputs) {\n      if (input.name === selector)\n        return input;\n    }\n    for (let input of inputs) {\n      if (input.value === selector)\n        return input;\n    }\n    return null;\n  }\n\n  // browser.pressButton(selector, callback)\n  //\n  // Press a button (button element or input of type `submit`).  Typically this will submit the form.  Use the callback\n  // to wait for the from submission, page to load and all events run their course.\n  //\n  // selector - CSS selector, button name or text of BUTTON element\n  // callback - Called with two arguments: null and browser\n  pressButton(selector, callback) {\n    const button = this.button(selector);\n    assert(button, `No BUTTON '${selector}'`);\n    assert(!button.getAttribute('disabled'), 'This button is disabled');\n    button.focus();\n    return this.fire(button, 'click', callback);\n  }\n\n\n  // -- Cookies --\n\n\n  // Returns cookie that best matches the identifier.\n  //\n  // identifier - Identifies which cookie to return\n  // allProperties - If true, return all cookie properties, other just the value\n  //\n  // Identifier is either the cookie name, in which case the cookie domain is\n  // determined from the currently open Web page, and the cookie path is \"/\".\n  //\n  // Or the identifier can be an object specifying:\n  // name   - The cookie name\n  // domain - The cookie domain (defaults to hostname of currently open page)\n  // path   - The cookie path (defaults to \"/\")\n  //\n  // Returns cookie value, or cookie object (see setCookie).\n  getCookie(identifier, allProperties) {\n    identifier = this._cookieIdentifier(identifier);\n    assert(identifier.name, 'Missing cookie name');\n    assert(identifier.domain, 'No domain specified and no open page');\n\n    const cookie = this.cookies.select(identifier)[0];\n    return cookie ?\n      (allProperties ?\n        this._cookieProperties(cookie) :\n        cookie.value) :\n      null;\n  }\n\n  // Deletes cookie that best matches the identifier.\n  //\n  // identifier - Identifies which cookie to return\n  //\n  // Identifier is either the cookie name, in which case the cookie domain is\n  // determined from the currently open Web page, and the cookie path is \"/\".\n  //\n  // Or the identifier can be an object specifying:\n  // name   - The cookie name\n  // domain - The cookie domain (defaults to hostname of currently open page)\n  // path   - The cookie path (defaults to \"/\")\n  //\n  // Returns true if cookie delete.\n  deleteCookie(identifier) {\n    identifier = this._cookieIdentifier(identifier);\n    assert(identifier.name, 'Missing cookie name');\n    assert(identifier.domain, 'No domain specified and no open page');\n\n    const cookie = this.cookies.select(identifier)[0];\n    if (cookie)\n      this.cookies.delete(cookie);\n    return !!cookie;\n  }\n\n  // Sets a cookie.\n  //\n  // You can call this function with two arguments to set a session cookie: the\n  // cookie value and cookie name.  The domain is determined from the current\n  // page URL, and the path is always \"/\".\n  //\n  // Or you can call it with a single argument, with all cookie options:\n  // name     - Name of the cookie\n  // value    - Value of the cookie\n  // domain   - The cookie domain (e.g example.com, .example.com)\n  // path     - The cookie path\n  // expires  - Time when cookie expires\n  // maxAge   - How long before cookie expires\n  // secure   - True for HTTPS only cookie\n  // httpOnly - True if cookie not accessible from JS\n  setCookie(nameOrOptions, value) {\n    const domain = this.location && this.location.hostname;\n    if (typeof(nameOrOptions) === 'string') {\n      this.cookies.set({\n        name:     nameOrOptions,\n        value:    value || '',\n        domain:   domain,\n        path:     '/',\n        secure:   false,\n        httpOnly: false\n      });\n    } else {\n      assert(nameOrOptions.name, 'Missing cookie name');\n      this.cookies.set({\n        name:       nameOrOptions.name,\n        value:      nameOrOptions.value || value || '',\n        domain:     nameOrOptions.domain || domain,\n        path:       nameOrOptions.path || '/',\n        secure:     !!nameOrOptions.secure,\n        httpOnly:   !!nameOrOptions.httpOnly,\n        expires:    nameOrOptions.expires,\n        'max-age':  nameOrOptions['max-age']\n      });\n    }\n  }\n\n  // Deletes all cookies.\n  deleteCookies() {\n    this.cookies.deleteAll();\n  }\n\n  // Save cookies to a text string.  You can use this to load them back\n  // later on using `Browser.loadCookies`.\n  saveCookies() {\n    const serialized = [`# Saved on ${new Date().toISOString()}`];\n    for (let cookie of this.cookies.sort(Tough.cookieCompare))\n      serialized.push(cookie.toString());\n    return serialized.join('\\n') + '\\n';\n  }\n\n  // Load cookies from a text string (e.g. previously created using\n  // `Browser.saveCookies`.\n  loadCookies(serialized) {\n    for (let line of serialized.split(/\\n+/)) {\n      line = line.trim();\n      if (line && line[0] !== `#`)\n        this.cookies.push(Cookie.parse(line));\n    }\n  }\n\n  // Converts Tough Cookie object into Zombie cookie representation.\n  _cookieProperties(cookie) {\n    const properties = {\n      name:   cookie.key,\n      value:  cookie.value,\n      domain: cookie.domain,\n      path:   cookie.path\n    };\n    if (cookie.secure)\n      properties.secure = true;\n    if (cookie.httpOnly)\n      properties.httpOnly = true;\n    if (cookie.expires && cookie.expires < Infinity)\n      properties.expires = cookie.expires;\n    return properties;\n  }\n\n  // Converts cookie name/identifier into an identifier object.\n  _cookieIdentifier(identifier) {\n    const location = this.location;\n    const domain = location && location.hostname;\n    const path   = location && location.pathname || '/';\n    return {\n      name:   identifier.name || identifier,\n      domain: identifier.domain || domain,\n      path:   identifier.path || path\n    };\n  }\n\n\n  // -- Local/Session Storage --\n\n\n  // Returns local Storage based on the document origin (hostname/port). This is the same storage area you can access\n  // from any document of that origin.\n  localStorage(host) {\n    return this._storages.local(host);\n  }\n\n  // Returns session Storage based on the document origin (hostname/port). This is the same storage area you can access\n  // from any document of that origin.\n  sessionStorage(host) {\n    return this._storages.session(host);\n  }\n\n  // Save local/session storage to a text string.  You can use this to load the data later on using\n  // `browser.loadStorage`.\n  saveStorage() {\n    this._storages.save();\n  }\n\n  // Load local/session stroage from a text string (e.g. previously created using `browser.saveStorage`.\n  loadStorage(serialized) {\n    this._storages.load(serialized);\n  }\n\n\n  // Scripts\n  // -------\n\n  // Evaluates a JavaScript expression in the context of the current window and returns the result.  When evaluating\n  // external script, also include filename.\n  //\n  // You can also use this to evaluate a function in the context of the window: for timers and asynchronous callbacks\n  // (e.g. XHR).\n  evaluate(code, filename) {\n    if (!this.window)\n      this.open();\n    return this.window._evaluate(code, filename);\n  }\n\n\n  // Interaction\n  // -----------\n\n  // browser.onalert(fn)\n  //\n  // Called by `window.alert` with the message.\n  onalert(fn) {\n    this._interact.onalert(fn);\n  }\n\n  // browser.onconfirm(question, response)\n  // browser.onconfirm(fn)\n  //\n  // The first form specifies a canned response to return when `window.confirm` is called with that question.  The second\n  // form will call the function with the question and use the respone of the first function to return a value (true or\n  // false).\n  //\n  // The response to the question can be true or false, so all canned responses are converted to either value.  If no\n  // response available, returns false.\n  onconfirm(question, response) {\n    this._interact.onconfirm(question, response);\n  }\n\n  // browser.onprompt(message, response)\n  // browser.onprompt(fn)\n  //\n  // The first form specifies a canned response to return when `window.prompt` is called with that message.  The second\n  // form will call the function with the message and default value and use the response of the first function to return\n  // a value or false.\n  //\n  // The response to a prompt can be any value (converted to a string), false to indicate the user cancelled the prompt\n  // (returning null), or nothing to have the prompt return the default value or an empty string.\n  onprompt(message, response) {\n    this._interact.onprompt(message, response);\n  }\n\n  // browser.prompted(message) => boolean\n  //\n  // Returns true if user was prompted with that message (`window.alert`, `window.confirm` or `window.prompt`)\n  prompted(message) {\n    return this._interact.prompted(message);\n  }\n\n\n  // Debugging\n  // ---------\n\n  get statusCode() {\n    return (this.window && this.window._response) ?\n      this.window._response.statusCode :\n      null;\n  }\n\n  get success() {\n    const statusCode = this.statusCode;\n    return statusCode >= 200 && statusCode < 400;\n  }\n\n  get redirected() {\n    return this.window && this.window._response && this.window._response.redirects > 0;\n  }\n\n  get source() {\n    return (this.window && this.window._response) ?\n      this.window._response.body :\n      null;\n  }\n\n\n  // Zombie can spit out messages to help you figure out what's going on as your code executes.\n  //\n  // To spit a message to the console when running in debug mode, call this method with one or more values (same as\n  // `console.log`).  You can also call it with a function that will be evaluated only when running in debug mode.\n  //\n  // For example:\n  //     browser.log('Opening page:', url);\n  //     browser.log(function() { return 'Opening page: ' + url });\n  log(...args) {\n    if (typeof(args[0]) === 'function')\n      args = [args[0]()];\n    this.emit('log', format(...args));\n  }\n\n  // Dump information to the console: Zombie version, current URL, history, cookies, event loop, etc.  Useful for\n  // debugging and submitting error reports.\n  dump() {\n    function indent(lines) {\n      return lines.map(line => `  ${line}\\n`).join('');\n    }\n    process.stdout.write(`Zombie: ${Browser.VERSION}\\n\\n`);\n    process.stdout.write(`URL: ${this.window.location.href}\\n`);\n    process.stdout.write(`History:\\n${indent(this.window.history.dump())}\\n`);\n    process.stdout.write(`Cookies:\\n${indent(this.cookies.dump())}\\n`);\n    process.stdout.write(`Storage:\\n${indent(this._storages.dump())}\\n`);\n    process.stdout.write(`Eventloop:\\n${indent(this.eventLoop.dump())}\\n`);\n    if (this.document) {\n      let html = this.document.outerHTML;\n      if (html.length > 497)\n        html = html.slice(0, 497) + '...';\n      process.stdout.write(`Document:\\n${indent(html.split('\\n'))}\\n`);\n    } else\n      process.stdout.write('No document\\n');\n  }\n\n}\n\n\nObject.assign(Browser, {\n\n  VERSION,\n\n  // These defaults are used in any new browser instance.\n  default: {\n\n    // Which features are enabled.\n    features: DEFAULT_FEATURES,\n\n    // Tells the browser how many redirects to follow before aborting a request. Defaults to 5\n    maxRedirects: 5,\n\n    // Proxy URL.\n    //\n    // Example\n    //   Browser.default.proxy = 'http://myproxy:8080'\n    proxy: null,\n\n    // If true, supress `console.log` output from scripts (ignored when DEBUG=zombie)\n    silent: false,\n\n    // You can use visit with a path, and it will make a request relative to this host/URL.\n    site: undefined,\n\n    // Check SSL certificates against CA.  False by default since you're likely\n    // testing with a self-signed certificate.\n    strictSSL: false,\n\n    // Sets the outgoing IP address in case there is more than on available.\n    // Defaults to 0.0.0.0 which should select default interface\n    localAddress: '0.0.0.0',\n\n    // User agent string sent to server.\n    userAgent: `Mozilla/5.0 Chrome/10.0.613.0 Safari/534.15 Zombie.js/${VERSION}`,\n\n    // Navigator language code\n    language: 'en-US',\n\n    // Default time to wait (visit, wait, etc).\n    waitDuration: '5s',\n\n    // Indicates whether or not to validate and execute JavaScript, default true.\n    runScripts: true\n  },\n\n\n  // Use this function to create a new Browser instance.\n  create(options) {\n    return new Browser(options);\n  },\n\n  // Debug instance.  Create new instance when enabling debugging with Zombie.debug\n  _debug: debug('zombie'),\n\n  // Enable debugging.  You can do this in code instead of setting DEBUG environment variable.\n  debug() {\n    debug.enable('zombie');\n    this._debug = debug('zombie');\n  },\n\n  // Allows you to masquerade CNAME, A (IPv4) and AAAA (IPv6) addresses.  For\n  // example:\n  //   Brower.dns.localhost('example.com')\n  //\n  // This is a shortcut for:\n  //   Brower.dns.map('example.com', '127.0.0.1)\n  //   Brower.dns.map('example.com', '::1')\n  //\n  // See also Browser.localhost.\n  get dns() {\n    if (!this._dns)\n      this._dns = new DNSMask();\n    return this._dns;\n  },\n\n  // Allows you to make request against port 80, route them to test server running\n  // on less privileged port.\n  //\n  // For example, if your application is listening on port 3000, you can do:\n  //   Browser.ports.map('localhost', '3000')\n  //\n  // Or in combination with DNS mask:\n  //   Brower.dns.map('example.com', '127.0.0.1)\n  //   Browser.ports.map('example.com', '3000')\n  //\n  // See also Browser.localhost.\n  get ports() {\n    if (!this._ports)\n      this._ports = new PortMap();\n    return this._ports;\n  },\n\n  // Allows you to make requests against a named domain and port 80, route them to\n  // the test server running on localhost and less privileged port.\n  //\n  // For example, say your test server is running on port 3000, you can do:\n  //   Browser.localhost('example.com', 3000)\n  //\n  // You can now visit http://example.com and it will be handled by the server\n  // running on port 3000.  In fact, you can just write:\n  //   browser.visit('/path', function() {\n  //     assert(broswer.location.href == 'http://example.com/path');\n  //   });\n  //\n  // This is equivalent to DNS masking the hostname as 127.0.0.1 (see\n  // Browser.dns), mapping port 80 to the specified port (see Browser.ports) and\n  // setting Browser.default.site to the hostname.\n  localhost(hostname, port) {\n    this.dns.localhost(hostname);\n    this.ports.map(hostname, port);\n    if (!this.default.site)\n      this.default.site = hostname.replace(/^\\*\\./, '');\n  },\n\n\n  // Register a browser extension.\n  //\n  // Browser extensions are called for each newly created browser object, and\n  // can be used to change browser options, register listeners, add methods,\n  // etc.\n  extend(extension) {\n    this._extensions.push(extension);\n  },\n\n  _extensions: []\n\n});\n\n\nmodule.exports = Browser;\n\n"],"sourceRoot":"/source/"}