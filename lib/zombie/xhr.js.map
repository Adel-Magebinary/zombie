{"version":3,"sources":["zombie/xhr.js"],"names":[],"mappings":"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","file":"zombie/xhr.js","sourcesContent":["// Implemenets XMLHttpRequest.\n// See http://www.w3.org/TR/XMLHttpRequest/#the-abort()-method\n\n\nconst DOM   = require('./dom');\nconst URL   = require('url');\n\n\nclass XMLHttpRequest extends DOM.EventTarget {\n\n  constructor(window) {\n    this._window      = window;\n    // Pending request\n    this._pending     = null;\n    // Response headers\n    this._responseHeaders = null;\n    this.readyState   = XMLHttpRequest.UNSENT;\n\n    this.onreadystatechange = null;\n    this.timeout      = 0;\n    this.status       = null;\n    this.statusText   = null;\n    this.responseText = null;\n    this.responseXML  = null;\n\n    // XHR events need the first to dispatch, the second to propagate up to window\n    this._ownerDocument = window.document;\n  }\n\n\n  // Aborts the request if it has already been sent.\n  abort() {\n    // Tell any pending request it has been aborted.\n    const request = this._pending;\n    if (this.readyState === XMLHttpRequest.UNSENT || (this.readyState === XMLHttpRequest.OPENED && !request.sent)) {\n      this.readyState = XMLHttpRequest.UNSENT;\n      return;\n    }\n\n    // Tell any pending request it has been aborted.\n    request.aborted = true;\n  }\n\n\n  // Returns all the response headers as a string, or null if no response has\n  // been received. Note: For multipart requests, this returns the headers from\n  // the current part of the request, not from the original channel.\n  getAllResponseHeaders(header) {\n    if (this._responseHeaders) {\n      // XHR's getAllResponseHeaders, against all reason, returns a multi-line\n      // string.  See http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\n      const headerStrings = [];\n      for (let name in this._responseHeaders) {\n        let value = this._responseHeaders[name];\n        headerStrings.push(`${name}: ${value}`);\n      }\n      return headerStrings.join('\\n');\n    } else\n      return null;\n  }\n\n\n  // Returns the string containing the text of the specified header, or null if\n  // either the response has not yet been received or the header doesn't exist in\n  // the response.\n  getResponseHeader(header) {\n    if (this._responseHeaders)\n      return this._responseHeaders[header.toLowerCase()];\n    else\n      return null;\n  }\n\n\n  // Initializes a request.\n  //\n  // Calling this method an already active request (one for which open()or\n  // openRequest()has already been called) is the equivalent of calling abort().\n  open(method, url, useAsync, user, password) { // jshint ignore:line\n    if (useAsync === false)\n      throw new DOM.DOMException(DOM.NOT_SUPPORTED_ERR, 'Zombie does not support synchronous XHR requests');\n\n    // Abort any pending request.\n    this.abort();\n\n    // Check supported HTTP method\n    method = method.toUpperCase();\n    if (/^(CONNECT|TRACE|TRACK)$/.test(method))\n      throw new DOM.DOMException(DOM.SECURITY_ERR, 'Unsupported HTTP method');\n    if (!/^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/.test(method))\n      throw new DOM.DOMException(DOM.SYNTAX_ERR, 'Unsupported HTTP method');\n\n    const headers = {};\n\n    // Normalize the URL and check security\n    url = URL.parse(URL.resolve(this._window.location.href, url));\n    // Don't consider port if they are standard for http and https\n    if ((url.protocol === 'https:' && url.port === '443') ||\n        (url.protocol === 'http:'  && url.port === '80'))\n      delete url.port;\n\n    if (!/^https?:$/i.test(url.protocol))\n      throw new DOM.DOMException(DOM.NOT_SUPPORTED_ERR, 'Only HTTP/S protocol supported');\n    url.hostname = url.hostname || this._window.location.hostname;\n    url.host = url.port ? `${url.hostname}:${url.port}` : url.hostname;\n    if (url.host !== this._window.location.host) {\n      headers.origin = `${this._window.location.protocol}//${this._window.location.host}`;\n      this._cors = headers.origin;\n    }\n    url.hash = null;\n    if (user)\n      url.auth = `${user}:${password}`;\n\n    // Reset all the response fields.\n    this.status       = null;\n    this.statusText   = null;\n    this.responseText = null;\n    this.responseXML  = null;\n\n    const request = { method, headers, url: URL.format(url) };\n    this._pending = request;\n    this._stateChanged(XMLHttpRequest.OPENED);\n  }\n\n  // Sends the request. If the request is asynchronous (which is the default),\n  // this method returns as soon as the request is sent. If the request is\n  // synchronous, this method doesn't return until the response has arrived.\n  send(data) {\n    // Request must be opened.\n    if (this.readyState !== XMLHttpRequest.OPENED)\n      throw new DOM.DOMException(DOM.INVALID_STATE_ERR,  'Invalid state');\n\n    this._fire('loadstart');\n\n    const request   = this._pending;\n    request.headers['content-type'] = request.headers['content-type'] || 'text/plain';\n    // Make the actual request\n    request.body    = data;\n    request.timeout = this.timeout;\n\n    this._window._eventQueue.http(request.method, request.url, request, (error, response)=> {\n      if (this._pending === request)\n        this._pending = null;\n\n      // If aborting or error\n      this.status       = 0;\n      this.responseText = '';\n\n      // Request aborted\n      if (request.aborted) {\n        this._stateChanged(XMLHttpRequest.DONE);\n        this._fire('progress');\n        this._fire('abort', new DOM.DOMException(DOM.ABORT_ERR, 'Request aborted'));\n        return;\n      }\n\n      if (error) {\n        this._stateChanged(XMLHttpRequest.DONE);\n        this._fire('progress');\n\n        if (error.code === 'ETIMEDOUT')\n          this._fire('timeout', new DOM.DOMException(DOM.TIMEOUT_ERR, 'The request timed out'));\n        else\n          this._fire('error', new DOM.DOMException(DOM.NETWORK_ERR, error.message));\n        this._fire('loadend');\n        return;\n      }\n\n      // CORS request, check origin, may lead to new error\n      if (this._cors) {\n        const allowedOrigin = response.headers['access-control-allow-origin'];\n        if (!(allowedOrigin === '*' || allowedOrigin === this._cors)) {\n          const corsError = new DOM.DOMException(DOM.SECURITY_ERR, 'Cannot make request to different domain');\n          this._stateChanged(XMLHttpRequest.DONE);\n          this._fire('progress');\n          this._fire('error', corsError);\n          this._fire('loadend');\n          this.raise('error', corsError.message, { exception: corsError });\n          return;\n        }\n      }\n\n      // Since the request was not aborted, we set all the fields here and change\n      // the state to HEADERS_RECEIVED.\n      this.status           = response.statusCode;\n      this.statusText       = response.statusText;\n      this._responseHeaders = response.headers;\n      this._stateChanged(XMLHttpRequest.HEADERS_RECEIVED);\n\n      this.responseText = response.body ? response.body.toString() : '';\n      this._stateChanged(XMLHttpRequest.LOADING);\n\n      this.responseXML = null;\n      this._stateChanged(XMLHttpRequest.DONE);\n\n      this._fire('progress');\n      this._fire('load');\n      this._fire('loadend');\n\n    });\n    request.sent = true;\n  }\n\n\n  // Sets the value of an HTTP request header.You must call setRequestHeader()\n  // after open(), but before send().\n  setRequestHeader(header, value) {\n    if (this.readyState !== XMLHttpRequest.OPENED)\n      throw new DOM.DOMException(DOM.INVALID_STATE_ERR,  'Invalid state');\n    const request = this._pending;\n    request.headers[header.toString().toLowerCase()] = value.toString();\n  }\n\n\n  // Fire onreadystatechange event\n  _stateChanged(newState) {\n    this.readyState = newState;\n    this._fire('readystatechange');\n  }\n\n  // Fire the named event on this object\n  _fire(eventName, error) {\n    const event = new DOM.Event('xhr');\n    event.initEvent(eventName, true, true);\n    event.error = error;\n    this.dispatchEvent(event);\n  }\n\n  // Raise error coming from jsdom\n  raise(type, message, data) {\n    this._ownerDocument.raise(type, message, data);\n  }\n\n}\n\n\n// Lifecycle states\nXMLHttpRequest.UNSENT           = 0;\nXMLHttpRequest.OPENED           = 1;\nXMLHttpRequest.HEADERS_RECEIVED = 2;\nXMLHttpRequest.LOADING          = 3;\nXMLHttpRequest.DONE             = 4;\n\nmodule.exports = XMLHttpRequest;\n\n"],"sourceRoot":"/source/"}